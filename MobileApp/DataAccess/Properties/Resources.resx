<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="menu_json" xml:space="preserve">
    <value>[
   {
      "Id": 1,
      "Name": "Bagels and Cream Cheese",
      "Description": "Authentic New York-style bagels.  Start the day with freshly baked batches and your favorite cream cheese.",
      "Price": 7.49,
      "Type": "Breakfast",
      "ImageUri": "breakfast_bagel.jpg"
   },
   {
      "Id": 2,
      "Name": "Kellog's Honey Buzz Cereal",
      "Description": "A bowl of Honey Smacks with honey, toasted pecans and banana chips.",
      "Price": 6.99,
      "Type": "Breakfast",
      "ImageUri": "breakfast_cereal.jpg"
   },
   {
      "Id": 3,
      "Name": "Chocolate Macadamia Croissant",
      "Description": "Chocolate croissant, sprinkled with macadmia nut cookie. Always baked fresh!",
      "Price": 7.99,
      "Type": "Breakfast",
      "ImageUri": "breakfast_croissant.jpg"
   },
   {
      "Id": 4,
      "Name": "King &amp; Country's Breakfast",
      "Description": "A Southern-style sausage patty, fluffy eggs and aged Cheddar cheese are served on a perfectly toasty English muffin.",
      "Price": 11.99,
      "Type": "Breakfast",
      "ImageUri": "breakfast_sausage_egg.jpg"
   },
   {
      "Id": 5,
      "Name": "Grilled Cheese Sandwich",
      "Description": "The classic all american cheese grilled cheese sandwich grilled up on white bread.",
      "Price": 9.49,
      "Type": "Lunch",
      "ImageUri": "lunch_cheese_sandwich.jpg"
   },
   {
      "Id": 6,
      "Name": "Maui Burger",
      "Description": "Black pepper-crusted burger with pepper jack cheese, jalapeno, lettuce and tomato.",
      "Price": 13.99,
      "Type": "Lunch",
      "ImageUri": "lunch_hamburger.jpg"
   },
   {
      "Id": 7,
      "Name": "Ultimate Supreme Pizza",
      "Description": "Hand-tossed pizza topped with pepperoni, turkey sausage, beef, mushrooms, red onions and green peppers.",
      "Price": 13.50,
      "Type": "Lunch",
      "ImageUri": "lunch_pizza.jpg"
   },
   {
      "Id": 8,
      "Name": "Spaghetti Marinara",
      "Description": "Made from scratch recipe of fresh onions, tomatoes, carrots, and garlic sauteed in olive oil and Italian seasonings.",
      "Price": 11.75,
      "Type": "Lunch",
      "ImageUri": "lunch_spaghetti.jpg"
   },
   {
      "Id": 9,
      "Name": "Spinach Sweet Crisp",
      "Description": "Baby spinach, freshly sliced oranges, grapes, cranberries, onions and creamy mozzarella cheese.",
      "Price": 10.49,
      "Type": "Lunch",
      "ImageUri": "lunch_spinach_salad.jpg"
   },
   {
      "Id": 10,
      "Name": "Orange Shrimp and Broccoli",
      "Description": "Perfect quick and easy meal for a busy weeknight or for entertaining guests. The sweet and tangy orange sauce only has 4 ingredients and the garlic sesame fried rice elevates the dish into something special.",
      "Price": 13.50,
      "Type": "Dinner",
      "ImageUri": "dinner_broccoli_shrimp.jpg"
   },
   {
      "Id": 11,
      "Name": "BBQ Chicken",
      "Description": "Tangy-sweet kebabs, made with boneless, skinless chicken thighs and red onion, can be grilled or baked.",
      "Price": 14.49,
      "Type": "Dinner",
      "ImageUri": "dinner_grilled_chicken.jpg"
   },
   {
      "Id": 12,
      "Name": "Alaskan Grilled Salmon",
      "Description": "Filet grilled to perfection and topped with garlic-herb butter. Served with parmesan-garlic broccoli and yellow rice.",
      "Price": 13.99,
      "Type": "Dinner",
      "ImageUri": "dinner_salmon.jpg"
   },
   {
      "Id": 13,
      "Name": "New York Steak",
      "Description": "19 ounces of sheer perfection—full-bodied and full of flavor.",
      "Price": 27.99,
      "Type": "Dinner",
      "ImageUri": "dinner_steak.jpg"
   },
   {
      "Id": 14,
      "Name": "Mongolian Stir Fry",
      "Description": "Wok-fired classics of coconut curry vegetables",
      "Price": 12.49,
      "Type": "Dinner",
      "ImageUri": "dinner_stir_fry.jpg"
   }
]</value>
  </data>
</root>